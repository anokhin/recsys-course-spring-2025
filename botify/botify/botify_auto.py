import subprocess
import sys
import time
import requests
from pathlib import Path
from datetime import datetime


def wait_for_service(url: str, timeout: int = 100, interval: int = 1) -> bool:
    """–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ URL"""
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=3)
            if response.status_code == 200:
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å {url} –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
        except (requests.exceptions.RequestException, requests.exceptions.ConnectionError):
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ {url}... (—Ç–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ {int(timeout - (time.time() - start_time))}s)")
            time.sleep(interval)
    print(f"‚ùå –°–µ—Ä–≤–∏—Å {url} –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    return False


def run_command(cmd: str, error_msg: str, check_service: str = None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    full_cmd = f"""
    source ~/miniconda3/etc/profile.d/conda.sh
    conda activate lightfm_env
    {cmd}
    """

    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {cmd}")
    process = subprocess.Popen(
        ["bash", "-c", full_cmd],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1
    )

    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print(output.strip())

    if process.returncode != 0:
        print(f"‚ùå {error_msg} (–∫–æ–¥: {process.returncode})")
        sys.exit(1)

    if check_service:
        if not wait_for_service(check_service):
            sys.exit(1)


def prepare_directory(dir_path: str) -> None:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    path = Path(dir_path)

    if path.exists():
        if any(path.iterdir()):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –Ω–µ –ø—É—Å—Ç–∞—è")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = f"{dir_path}_backup_{timestamp}"

            # –ò—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –±—ç–∫–∞–ø–∞
            counter = 1
            while Path(backup_dir).exists():
                backup_dir = f"{dir_path}_backup_{timestamp}_{counter}"
                counter += 1

            print(f"üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –≤ {backup_dir}")
            try:
                path.rename(backup_dir)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
                sys.exit(1)
        else:
            print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É—Å—Ç–∞")
            return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print(f"üìÇ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path}")
    try:
        path.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    num_recommenders = 2
    num_sims = 10000
    num_processes = 8
    data_dir = "hw_2/my_best_recommender_data"
    full_data_path = f"/mnt/c/Users/denis/PycharmProjects/recsys-course-spring-2025/rec_sys_data/{data_dir}"
    # full_data_path = f"/mnt/c/Users/denis/PycharmProjects/recsys-course-spring-2025/rec_sys_data/{data_dir}"

    prepare_directory(full_data_path)

    commands = [
        (
            f"cd /mnt/c/Users/denis/PycharmProjects/recsys-course-spring-2025/botify && "
            f"docker-compose up -d --build --force-recreate --scale recommender={num_recommenders}",
            "–û—à–∏–±–∫–∞ Docker",
            "http://localhost:5001"
        ),
        (
            f"cd /mnt/c/Users/denis/PycharmProjects/recsys-course-spring-2025/sim && "
            f"python -m sim.run --episodes {num_sims} --config config/env.yml multi --processes {num_processes}",
            "–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏",
            None
        ),
        (
            f'cd /mnt/c/Users/denis/PycharmProjects/recsys-course-spring-2025/script && '
            f'python dataclient.py --recommender {num_recommenders} log2local '
            f'"{full_data_path}"',
            "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
            None
        )
    ]

    for cmd, err_msg, check_url in commands:
        run_command(cmd, err_msg, check_url)

    print("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
